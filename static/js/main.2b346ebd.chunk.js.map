{"version":3,"sources":["utils/AppRoute.js","utils/ScrollReveal.js","layouts/LayoutDefault.js","utils/SectionProps.js","components/sections/Hero.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["AppRoute","Component","component","Layout","layout","rest","undefined","props","children","render","ScrollReveal","React","forwardRef","ref","useState","window","innerHeight","viewportHeight","setViewportheight","revealEl","setRevealel","checkComplete","length","document","querySelectorAll","revealElements","i","el","revealDelay","getAttribute","revealOffset","offset","getBoundingClientRect","top","elementIsVisible","closest","classList","contains","setTimeout","add","useImperativeHandle","init","useEffect","addEventListener","handleScroll","handleResize","handleListeners","removeEventListener","throttle","propTypes","PropTypes","func","isRequired","LayoutDefault","className","SectionShared","types","topOuterDivider","bool","bottomOuterDivider","topDivider","bottomDivider","hasBgColor","invertColor","defaults","SectionProps","defaultProps","invertMobile","invertDesktop","alignTop","imageFill","pushLeft","Hero","outerClasses","classNames","innerClasses","data-reveal-delay","Home","ReactGA","initialize","process","debug","siteSpeedSampleRate","App","childRef","useRef","location","useLocation","page","pathname","body","current","set","pageview","trackPage","exact","path","Boolean","hostname","match","history","createBrowserHistory","ReactDOM","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b346ebd.chunk.js","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst AppRoute = ({\n  component: Component,\n  layout: Layout,\n  ...rest\n}) => {\n\n  Layout = (Layout === undefined) ? props => (<>{props.children}</>) : Layout;\n\n  return (\n    <Route\n      {...rest}\n      render={props => (\n        <Layout>\n          <Component {...props} />\n        </Layout>\n      )} />\n  );\n}\n\nexport default AppRoute;","import React, { useState, useEffect, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport { throttle } from 'lodash';\n\nconst ScrollReveal = React.forwardRef((props, ref) => {\n\n  const [viewportHeight, setViewportheight] = useState(window.innerHeight); \n  const [revealEl, setRevealel] = useState([]);\n\n  const checkComplete = () => {\n    return revealEl.length <= document.querySelectorAll('[class*=reveal-].is-revealed').length;\n  };\n\n  const elementIsVisible = (el, offset) => {\n    return (el.getBoundingClientRect().top <= viewportHeight - offset);\n  };\n\n  const revealElements = () => {\n    if (checkComplete()) return;\n    for (let i = 0; i < revealEl.length; i++) {\n      let el = revealEl[i];\n      let revealDelay = el.getAttribute('data-reveal-delay');\n      let revealOffset = (el.getAttribute('data-reveal-offset') ? el.getAttribute('data-reveal-offset') : '200');\n      let listenedEl = (el.getAttribute('data-reveal-container') ? el.closest(el.getAttribute('data-reveal-container')) : el);\n      if (elementIsVisible(listenedEl, revealOffset) && !el.classList.contains('is-revealed')) {\n        if (revealDelay && revealDelay !== 0) {\n          setTimeout(function () {\n            el.classList.add('is-revealed');\n          }, revealDelay);\n        } else {\n          el.classList.add('is-revealed');\n        }\n      }\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    init() {\n      setRevealel(document.querySelectorAll('[class*=reveal-]'));\n    }\n  }));  \n\n  useEffect(() => {\n    if (typeof revealEl !== 'undefined' && revealEl.length > 0) {\n      if (!checkComplete()) {\n        window.addEventListener('scroll', handleScroll);\n        window.addEventListener('resize', handleResize);\n      }\n      revealElements();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [revealEl]);\n\n  const handleListeners = () => {\n    if (!checkComplete()) return;\n    window.removeEventListener('scroll', handleScroll);\n    window.removeEventListener('resize', handleResize);\n  };\n\n  const handleScroll = throttle(() => {\n    handleListeners();\n    revealElements();\n  }, 30);\n\n  const handleResize = throttle(() => {\n    setViewportheight(window.innerHeight);\n  }, 30);\n\n  useEffect(() => {\n    handleListeners();\n    revealElements();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewportHeight]);  \n\n  return (\n    <>\n      {props.children()}\n    </>\n  );\n});\n\nScrollReveal.propTypes = {\n  children: PropTypes.func.isRequired\n};\n\nexport default ScrollReveal;","import React from \"react\";\n// import Header from \"../components/layout/Header\";\n// import Footer from \"../components/layout/Footer\";\n\nconst LayoutDefault = ({ children }) => (\n    <>\n        {/* <Header navPosition=\"right\" className=\"reveal-from-bottom\" /> */}\n        <main className=\"site-content\">{children}</main>\n        {/* <Footer /> */}\n    </>\n);\n\nexport default LayoutDefault;\n","import PropTypes from 'prop-types';\n\n// Props shared by all sections\nconst SectionShared = {\n  types: {\n    topOuterDivider: PropTypes.bool,\n    bottomOuterDivider: PropTypes.bool,    \n    topDivider: PropTypes.bool,\n    bottomDivider: PropTypes.bool,\n    hasBgColor: PropTypes.bool,\n    invertColor: PropTypes.bool\n  },\n  defaults: {\n    topOuterDivider: false,\n    bottomOuterDivider: false,    \n    topDivider: false,\n    bottomDivider: false,\n    hasBgColor: false,\n    invertColor: false\n  }\n}\n\n// Default section props\nexport const SectionProps = {\n  types: {\n    ...SectionShared.types\n  },\n  defaults: {\n    ...SectionShared.defaults\n  }\n}\n\n// Section split props\nexport const SectionSplitProps = {\n  types: {\n    ...SectionShared.types,\n    invertMobile: PropTypes.bool,\n    invertDesktop: PropTypes.bool,\n    alignTop: PropTypes.bool,\n    imageFill: PropTypes.bool\n  },\n  defaults: {\n    ...SectionShared.defaults,\n    invertMobile: false,\n    invertDesktop: false,\n    alignTop: false,\n    imageFill: false\n  }\n}\n\n// Section tiles props\nexport const SectionTilesProps = {\n  types: {\n    ...SectionShared.types,\n    pushLeft: PropTypes.bool\n  },\n  defaults: {\n    ...SectionShared.defaults,\n    pushLeft: false\n  }\n}","import React from \"react\";\nimport classNames from \"classnames\";\nimport { SectionProps } from \"../../utils/SectionProps\";\n\nconst propTypes = {\n    ...SectionProps.types,\n};\n\nconst defaultProps = {\n    ...SectionProps.defaults,\n};\n\nconst Hero = ({\n    className,\n    topOuterDivider,\n    bottomOuterDivider,\n    topDivider,\n    bottomDivider,\n    hasBgColor,\n    invertColor,\n    ...props\n}) => {\n    const outerClasses = classNames(\n        \"illustration-section-01\",\n        \"hero section\",\n        // \"center-content\",\n        // topOuterDivider && \"has-top-divider\",\n        // bottomOuterDivider && \"has-bottom-divider\",\n        hasBgColor && \"has-bg-color\",\n        className\n    );\n\n    const innerClasses = classNames(\n        \"hero-inner section-inner\",\n        topDivider && \"has-top-divider\",\n        bottomDivider && \"has-bottom-divider\"\n    );\n\n    return (\n        <section {...props} className={outerClasses}>\n            <div className=\"container-sm\">\n                <div className={innerClasses}>\n                    <div className=\"hero-content\">\n                        <h1\n                            className=\"mt-0 mb-16 reveal-from-bottom\"\n                            data-reveal-delay=\"200\"\n                        >\n                            tangible\n                        </h1>\n\n                        <h3\n                            className=\"fw-400 reveal-from-top\"\n                            data-reveal-delay=\"1500\"\n                        >\n                            you are about to witness the\n                            <div />\n                            strength of street knowledge\n                        </h3>\n                        <p\n                            className=\"fw-100 text-s reveal-from-top\"\n                            data-reveal-delay=\"2050\"\n                        >\n                            Dr. Dre, Straight Outta Compton, 1998\n                        </p>\n                    </div>\n\n                    <h4\n                        className=\"spacer-64 reveal-from-top\"\n                        data-reveal-delay=\"2000\"\n                    >\n                        coming soon.\n                    </h4>\n                   \n                </div>\n            </div>\n        </section>\n    );\n};\n\nHero.propTypes = propTypes;\nHero.defaultProps = defaultProps;\n\nexport default Hero;\n","import React from \"react\";\nimport Hero from \"../components/sections/Hero\";\n\nconst Home = () => {\n    return <Hero />;\n};\n\nexport default Home;\n","import React, { useRef, useEffect } from \"react\";\nimport { useLocation, Switch } from \"react-router-dom\";\nimport AppRoute from \"./utils/AppRoute\";\nimport ScrollReveal from \"./utils/ScrollReveal\";\nimport ReactGA from \"react-ga\";\n\n// Layouts\nimport LayoutDefault from \"./layouts/LayoutDefault\";\n\n// Views\nimport Home from \"./views/Home\";\n// import Product from \"./views/Product\";\n\n// Initialize Google Analytics\nReactGA.initialize(process.env.REACT_APP_GA_CODE, {\n    debug: true,\n    siteSpeedSampleRate: 1000,\n});\n\nconst trackPage = (page) => {\n    ReactGA.set({ page });\n    ReactGA.pageview(page);\n};\n\nconst App = () => {\n    const childRef = useRef();\n    let location = useLocation();\n\n    useEffect(() => {\n        const page = location.pathname;\n        document.body.classList.add(\"is-loaded\");\n        childRef.current.init();\n        trackPage(page);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [location]);\n\n    return (\n        <ScrollReveal\n            ref={childRef}\n            children={() => (\n                <Switch>\n                    <AppRoute\n                        exact\n                        path=\"/\"\n                        component={Home}\n                        layout={LayoutDefault}\n                    />\n                    {/* <AppRoute exact path=\"/Product\" component={Product} layout={LayoutDefault} /> */}\n                </Switch>\n            )}\n        />\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router, HashRouter } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//import './App.css';\nimport \"./assets/scss/style.scss\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history}>\n        <HashRouter basename=\"/\">\n            <App />\n        </HashRouter>\n    </Router>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}